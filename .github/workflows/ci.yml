name: Deploy to Staging (AWS ECS)

on:
  push:
    branches:
      - staging

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: screencloud-takehome-staging
  ECS_CLUSTER_NAME: oms-staging-cluster
  ECS_SERVICE_NAME: oms-app-staging-service-dnfgravf
  ECS_APP_TASK_DEFINITION_FAMILY: oms-app-staging
  ECS_MIGRATION_TASK_DEFINITION_FAMILY: oms-db-migrations-staging
  APP_CONTAINER_NAME: oms-app
  MIGRATION_CONTAINER_NAME: oms-db-migrations

jobs:
  build-and-push:
    name: Build, Push to ECR, Run Migrations, Deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read   # Required to checkout the code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::699498176916:role/GitHubAction-OmsStagingDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current migration task definition
        id: download-migration-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_MIGRATION_TASK_DEFINITION_FAMILY }} --query taskDefinition > migration-task-definition.json
          echo "task_def_arn=$(jq -r .taskDefinitionArn migration-task-definition.json)" >> $GITHUB_OUTPUT

      - name: Update migration task definition with new image and register
        id: update-migration-task-def
        run: |
          # This jq cleaning is still necessary as we are using aws cli directly
          cat migration-task-definition.json | \
          jq '.containerDefinitions[0].image = "${{ steps.build-image.outputs.image_uri }}"' | \
          jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy) | del(.tags) | del(.ephemeralStorage) | del(.pidMode) | del(.ipcMode) | del(.enableFaultInjection) | del(.inferenceAccelerators) | del(.placementConstraints) | del(.proxyConfiguration)' > updated-migration-task-definition.json
          # Added a few more common keys that describe-task-definition might return but are not valid for register. Adjust as needed.

          aws ecs register-task-definition --cli-input-json file://updated-migration-task-definition.json --query taskDefinition.taskDefinitionArn --output text > new-migration-task-def-arn.txt
          echo "new_task_def_arn=$(cat new-migration-task-def-arn.txt)" >> $GITHUB_OUTPUT
          echo "Registered new migration task definition: $(cat new-migration-task-def-arn.txt)"

      - name: Run DB Migrations on ECS
        id: run-migrations
        env:
          SUBNET_ID: subnet-043799a1fff09b6f9
          SECURITY_GROUP_ID: sg-09c6dd87cf7ce4b0d
        run: |
          echo "Running migrations with task definition: ${{ steps.update-migration-task-def.outputs.new_task_def_arn }}"
          MIGRATION_TASK_ARN=$(aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --task-definition ${{ steps.update-migration-task-def.outputs.new_task_def_arn }} \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
            --query 'tasks[0].taskArn' --output text)

          if [ -z "$MIGRATION_TASK_ARN" ]; then
            echo "Failed to start migration task."
            exit 1
          fi
          echo "Migration task started: $MIGRATION_TASK_ARN"

          echo "Waiting for migration task to complete..."
          aws ecs wait tasks-stopped --cluster ${{ env.ECS_CLUSTER_NAME }} --tasks $MIGRATION_TASK_ARN

          MIGRATION_EXIT_CODE=$(aws ecs describe-tasks --cluster ${{ env.ECS_CLUSTER_NAME }} --tasks $MIGRATION_TASK_ARN --query "tasks[0].containers[?name=='${{ env.MIGRATION_CONTAINER_NAME }}'].exitCode | [0]" --output text)
          echo "Migration task container exit code: $MIGRATION_EXIT_CODE"
          if [ "$MIGRATION_EXIT_CODE" != "0" ]; then
            echo "Migration task failed with exit code $MIGRATION_EXIT_CODE."
            # Example: aws logs get-log-events --log-group-name /ecs/${{ env.ECS_MIGRATION_TASK_DEFINITION_FAMILY }} --log-stream-name ecs/${{ env.MIGRATION_CONTAINER_NAME }}/$(echo $MIGRATION_TASK_ARN | cut -d "/" -f3) --limit 50
            exit 1
          fi
          echo "Migrations completed successfully."

      - name: Download current app task definition
        id: download-app-task-def
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_APP_TASK_DEFINITION_FAMILY }} --query taskDefinition > app-task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: app-task-definition.json # Original downloaded definition
          container-name: ${{ env.APP_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image_uri }}
        # This step outputs a file path to ${{ steps.task-def.outputs.task-definition }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2 # <<<---- VERSION UPDATED HERE
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }} # Use the output from render-task-definition directly
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true