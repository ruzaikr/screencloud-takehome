import type { AppTransactionExecutor } from '../db/client';
import { orders, orderLines } from '../db/schema';

export interface CreateOrderParams {
    orderId: string; // Expect orderId to be generated by the service
    shippingAddrLatitude: number;
    shippingAddrLongitude: number;
    totalPriceCents: number;
    discountCents: number;
    shippingCostCents: number;
    // Optional fields, not used for walk-in yet
    // salesRepReference?: string;
    // customerReference?: string;
}

export interface OrderLineData {
    productId: string;
    warehouseId: string;
    quantity: number;
    unitPriceCents: number; // Price at the time of order
    discountPercentage: number; // Discount applied at time of order (e.g., 15.00 for 15%)
}

/**
 * Creates a new order and its associated order lines within a transaction.
 *
 * @param tx The Drizzle transaction executor.
 * @param orderData The data for the order header.
 * @param linesData An array of data for each order line.
 * @returns A Promise resolving to the ID of the newly created order.
 */
export async function createOrderAndLines(
    tx: AppTransactionExecutor,
    orderData: CreateOrderParams,
    linesData: OrderLineData[]
): Promise<string> {
    // Insert into orders table
    const newOrder = await tx
        .insert(orders)
        .values({
            id: orderData.orderId,
            shippingAddrLatitude: orderData.shippingAddrLatitude.toString(), // Drizzle expects string for numeric
            shippingAddrLongitude: orderData.shippingAddrLongitude.toString(), // Drizzle expects string for numeric
            totalPriceCents: orderData.totalPriceCents,
            discountCents: orderData.discountCents,
            shippingCostCents: orderData.shippingCostCents,
            createdAt: new Date(),
        })
        .returning({ id: orders.id });

    if (newOrder.length === 0 || !newOrder[0].id) {
        throw new Error('Failed to create order header.');
    }
    const orderId = newOrder[0].id;

    // Prepare order lines for batch insert
    if (linesData.length > 0) {
        const orderLinesToInsert = linesData.map(line => ({
            orderId: orderId,
            productId: line.productId,
            warehouseId: line.warehouseId,
            quantity: line.quantity,
            unitPriceCents: line.unitPriceCents,
            // Convert discount percentage (e.g., 15.0) to string '15.00' for numeric(5,2)
            discountPercentage: line.discountPercentage.toFixed(2),
            // id: auto-generated
        }));

        await tx.insert(orderLines).values(orderLinesToInsert);
    }

    return orderId;
}