services:
  db:
    image: postgres:15-alpine
    container_name: my_postgres_db
    restart: always
    environment:
      POSTGRES_USER: docker_user      # Choose a username
      POSTGRES_PASSWORD: docker_password  # Choose a strong password
      POSTGRES_DB: docker_db          # Choose a database name
    ports:
      - "5432:5432" # Expose PostgreSQL port to the host (optional, for direct DB access)
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist database data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docker_user -d docker_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: my_api
    restart: unless-stopped
    ports:
      - "3002:3002" # Map API port to host
    environment:
      # This DATABASE_URL points to the 'db' service within Docker's network
      DATABASE_URL: postgresql://docker_user:docker_password@db:5432/docker_db?sslmode=disable
      PORT: 3002
      # For entrypoint.sh pg_isready check
      PG_HOST: db
      PG_PORT: 5432
      PG_USER: docker_user
      PG_DATABASE: docker_db
      # Load other environment variables from your host's .env file or use defaults
      RESERVATION_TTL_MINUTES: ${RESERVATION_TTL_MINUTES:-10}
      SHIPPING_COST_CENTS_PER_KG_PER_KM: ${SHIPPING_COST_CENTS_PER_KG_PER_KM:-1}
      SHIPPING_COST_MAX_PERCENTAGE_OF_ORDER_VALUE: ${SHIPPING_COST_MAX_PERCENTAGE_OF_ORDER_VALUE:-15}
    depends_on:
      db:
        condition: service_healthy # Wait for the DB to be healthy before starting API

volumes:
  pgdata: # Defines the named volume for PostgreSQL data persistence